---
import { type CollectionEntry, getCollection, render } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime, extractFirstImageFromMarkdown } from "@lib/utils";
import BackToPrev from "@components/BackToPrev.astro";
import LetsConnect from "@components/LetsConnect.astro";
import { createBlogPostingSchema, createBreadcrumbSchema } from "@lib/schemas";

export async function getStaticPaths() {
  const posts = (await getCollection("blog"))
    .filter(post => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return posts.map(post => ({
    params: { id: post.id },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const post: Props = Astro.props;
const { Content } = await render(post);

// Extract image with fallback
const featuredImage =
  post.data.image ||
  extractFirstImageFromMarkdown(post.body ?? "") ||
  "/default-blog-image.jpg";

const articleSchema = createBlogPostingSchema(
  post.data.title,
  post.data.description,
  post.data.date,
  Astro.url,
  Astro.site!,
  post.data.keywords
);

const breadcrumbSchema = createBreadcrumbSchema([
  { name: "Home", url: Astro.site!.toString() },
  { name: "Blog", url: new URL("blog", Astro.site!).toString() },
  { name: post.data.title, url: Astro.url.toString() },
]);
---

<PageLayout
  title={post.data.title}
  description={post.data.description}
  image={featuredImage}
  keywords={post.data.keywords}
  type="article"
>
  <script
    is:inline
    type="application/ld+json"
    set:html={JSON.stringify(articleSchema)}
  />
  <script
    is:inline
    type="application/ld+json"
    set:html={JSON.stringify(breadcrumbSchema)}
  />
  <Container>
    <div class="animate">
      <BackToPrev href="/blog"> Back to blog </BackToPrev>
    </div>
    <div class="my-10 space-y-1">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={post.data.date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(post.body || "")}
        </div>
      </div>
      <h1 class="animate text-2xl font-semibold text-black dark:text-white">
        {post.data.title}
      </h1>
    </div>
    <article class="animate">
      <Content />
    </article>
    <LetsConnect />
  </Container>
</PageLayout>
